I'm trying to make an app that supports copying of files when `C` key is pressed while dragging. I know that dragging an item takes control over the whole event loop, so I tried using `QApplication.processEvents()` to process the events.

**Problem:**

My problem is when I stop moving the mouse, the keys I pressed are not detected. I'm pretty sure the reason behind this is that `QApplication.processEvents()` is inside the `dragMoveEvent`. 

**My Attempt:**
I tried to subclass `QDrag` that uses `QTimer` to call `QApplication.processEvents()` every 50 ms: 

    class ModifiedQDrag(QDrag):
		def __init__(self):
			super().__init__()
			self.timer = QTimer()
			self.timer.timeout.connect(self.process_event)
			self.timer.setInterval(50)
			self.timer.start()

		def process_event(self):
			print("processing")
			QApplication.processEvents()

Now I'm just really stuck here on how can I use this subclass. I tried to read the drag and drop documentation in pyqt5, and I figured out that I should use override `QMousePressEvent` and `QMousePressEvent`, so I tried this:

    		# -- mouse dragging -- #
		def mousePressEvent(self, event):
			if event.button() == Qt.LeftButton:
				self.dragStartPosition = event.pos()

			return super().mousePressEvent(event)

		def mouseMoveEvent(self, event):
			if event.buttons() != Qt.LeftButton:
				return
			if ((event.pos() - self.dragStartPosition).manhattanLength() < QApplication.startDragDistance()):
				return
			
			drag = ModifiedQDrag()  # <-- Initiate the drag
			mimeData = QMimeData()

			mimeData = mimeData(self.indexAt(event.pos()))
			drag.setMimeData(mimeData)

			dragAction = drag.exec(Qt.CopyAction)

			return super().mouseMoveEvent(event)

But now It's just throwing an error which is `QDrag(QObject): not enough arguments`, and I'm not really sure what's wrong now.

*Sorry about the `qt.qpa.fonts: Unable to enumerate family`* in the picture as I'm not sure how to remove it [Image Link](https://i.imgur.com/TUPR61q.gif)

**My Question:**

What causes the error? Am using the subclassed `QDrag` properly?
Also if you can, please provide an example as I can't really find any examples with regards to this.

**The code I used to reproduce the issue:**

    import sys
	from PyQt5.QtWidgets import *
	from PyQt5.QtCore import *
	from PyQt5.QtGui import *

	class ModifiedQDrag(QDrag):
		def __init__(self):
			super().__init__()
			self.timer = QTimer()
			self.timer.timeout.connect(self.process_event)
			self.timer.setInterval(50)
			self.timer.start()

		def process_event(self):
			print("processing")
			QApplication.processEvents()

	class Tree(QTreeView):
		def __init__(self):
			super().__init__()
			self.setDragDropMode(QAbstractItemView.DragDrop)
			self.setDropIndicatorShown(True)
			self.viewport().setAcceptDrops(True)
			self.setDefaultDropAction(Qt.CopyAction)
			self.setSelectionMode(QAbstractItemView.ExtendedSelection)
			self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

		# -- mouse dragging -- #
		def mousePressEvent(self, event):
			if event.button() == Qt.LeftButton:
				self.dragStartPosition = event.pos()

			return super().mousePressEvent(event)

		def mouseMoveEvent(self, event):
			if event.buttons() != Qt.LeftButton:
				return
			if ((event.pos() - self.dragStartPosition).manhattanLength() < QApplication.startDragDistance()):
				return
			
			drag = ModifiedQDrag()
			mimeData = QMimeData()

			mimeData = mimeData(self.indexAt(event.pos()))
			drag.setMimeData(mimeData)

			dragAction = drag.exec(Qt.CopyAction)

			return super().mouseMoveEvent(event)

		def dragMoveEvent(self, event):

			m = event.mimeData()
			if m.hasUrls():
				event.accept()
				return
		
			event.ignore()
			
		def dropEvent(self, event):
			print("[drop event] - dropped")

		# -- key press -- #
		def keyPressEvent(self, event):
			print(event.key())
			return super().keyPressEvent(event)

	class FileSystemView(QWidget):
		def __init__(self):
			super().__init__()

			# -- left side -- #
			left_side_dir = r"<Dir>"

			self.model = QFileSystemModel()
			self.model.setRootPath(left_side_dir)

			self.tree = Tree()
			self.tree.setModel(self.model)
			self.tree.setRootIndex(self.model.index(left_side_dir))

			# -- right side -- #
			right_side_dir = r"<Dir>"

			self.model2 = QFileSystemModel()
			self.model2.setRootPath(right_side_dir)

			self.tree2 = Tree()
			self.tree2.setModel(self.model2)
			self.tree2.setRootIndex(self.model2.index(right_side_dir))
			
			# -- layout -- #
			self.tree_layout = QHBoxLayout()
			self.tree_layout.addWidget(self.tree)
			self.tree_layout.addWidget(self.tree2)

			self.setLayout(self.tree_layout)

	app = QApplication(sys.argv)
	demo = FileSystemView()
	demo.show()
	sys.exit(app.exec_())
