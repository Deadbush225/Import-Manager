Thank you for @musicamante for his suggestions! I just need to use `QApplication.keyboardModifiers()` to get the modifiers pressed, then I need to check in the `dropEvent` if the dropAction was `Qt.CopyAction` or `Qt.MoveAction`. ***But I still have some questions below***

**This is my current implementation**:

    import sys
	from PyQt5.QtWidgets import QApplication, QWidget, QTreeView, QFileSystemModel, QHBoxLayout, QAbstractItemView, QSizePolicy
	from PyQt5.QtCore import Qt, QDir, QFileInfo, QFile

	class Tree(QTreeView):
		current_key = None

		def __init__(self):
			super().__init__()
			self.setDragDropMode(QAbstractItemView.DragDrop)
			self.setDropIndicatorShown(True)
			self.setAlternatingRowColors(True)
			self.viewport().setAcceptDrops(True)
			self.setDefaultDropAction(Qt.CopyAction)
			self.setSelectionMode(QAbstractItemView.ExtendedSelection)
			self.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Expanding)

		def startDrag(self, actions):
			self.grabKeyboard()
			super().startDrag(actions)

		def dragEnterEvent(self, event):
			self.passed_m = event.mimeData()
			event.accept()

		def dragLeaveEvent(self, event):
			print("leaving")

			if self.passed_m.hasUrls():
				self.leaving_urls = [QFileInfo(url.toLocalFile()).fileName() for url in self.passed_m.urls() if url.isLocalFile()]

				print(self.leaving_urls)

			return super().dragLeaveEvent(event)

		def dragMoveEvent(self, event):
			global general_drop_action

			m = event.mimeData()
			if m.hasUrls():
				event.accept()

				# print(f"keyboardModifier -> {QApplication.keyboardModifiers()}")

				if QApplication.keyboardModifiers() == Qt.ControlModifier:
					event.setDropAction(Qt.CopyAction)
				elif QApplication.keyboardModifiers() == Qt.ShiftModifier:
					event.setDropAction(Qt.MoveAction)

				# print("[dropEnterEvent] - event accepted")
				return
			event.ignore()
			
			return super().dragMoveEvent(event)

		def dropEvent(self, event):
			self.releaseKeyboard()

			dropAction = event.dropAction()

			print("[drop event] - dropped")
			# if event.source():
			ix = self.indexAt(event.pos())
			model = self.model()

			if ix.isValid():
				if not model.isDir(ix):
					ix = ix.parent()
				pathDir = model.filePath(ix)
			else:
				# for empty drag and drop
				pathDir = model.rootPath()

			m = event.mimeData()
			if m.hasUrls():
				urlLocals = [url for url in m.urls() if url.isLocalFile()]
				accepted = False
				for urlLocal in urlLocals:
					path = urlLocal.toLocalFile()
					info = QFileInfo(path)
					destination = QDir(pathDir).filePath(info.fileName())
					source = info.absoluteFilePath()
					if destination == source:
						continue  # means they are in the same folder
					if info.isDir():
						if dropAction == Qt.CopyAction:
							QDir().rename(source, destination)
						elif dropAction == Qt.MoveAction:
							QFile().copy(source, destination)
					else:
						qfile = QFile(source)
						if QFile(destination).exists():
							n_info = QFileInfo(destination)
							
							destination = n_info.canonicalPath() + QDir.separator() + n_info.completeBaseName() + " (copy)"
							if n_info.completeSuffix():   # for moving files without suffix
								destination += "." + n_info.completeSuffix()

						if dropAction == Qt.CopyAction:
							qfile.copy(destination)
						elif dropAction == Qt.MoveAction:
							qfile.rename(destination)
						print(f"added -> {info.fileName()}")  # for debugging

					accepted = True
				if accepted:
					event.acceptProposedAction()

	class FileSystemView(QWidget):
		def __init__(self):
			super().__init__()

			self.UI_Init()

		def UI_Init(self):
			self.setWindowTitle('File System Viewer')

			# -- left side pane -- #
			left_side_dir = r"<Dir>"

			self.model = QFileSystemModel()
			self.model.setRootPath(left_side_dir)

			self.tree = Tree()
			self.tree.isLeft = True
			self.tree.setModel(self.model)
			self.tree.setRootIndex(self.model.index(left_side_dir))

			# -- right side pane-- #
			right_side_dir = r"<Dir>"

			self.model2 = QFileSystemModel()
			self.model2.setRootPath(right_side_dir)

			self.tree2 = Tree()
			self.tree2.isRight = True
			self.tree2.setModel(self.model2)
			self.tree2.setRootIndex(self.model2.index(right_side_dir))
			
			# -- layout -- #
			self.tree_layout = QHBoxLayout()
			self.tree_layout.addWidget(self.tree)
			self.tree_layout.addWidget(self.tree2)

			self.setLayout(self.tree_layout)
			
	if __name__ == '__main__':
		app = QApplication(sys.argv)
		demo = FileSystemView()
		demo.show()
		sys.exit(app.exec_())


**The problem which I still can't figure out a way around:**

Because I'm using `ExtendedSelection` I can't really rely on keyboard modifiers as it will mess up the selection. 

**My question:**
Is it possible to capture the normal keys such as `C` or `V`?
